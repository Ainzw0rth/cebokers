# -------- START --------
START -> GENERAL_STMT

# -------- GENERAL STATEMENT --------
GENERAL_STMT -> DEFS_STMT
GENERAL_STMT -> LOOP_STMT
GENERAL_STMT -> TRY_CATCH
GENERAL_STMT -> THROW_STMT
GENERAL_STMT -> COMMENT_STMT
GENERAL_STMT -> ENTER
GENERAL_STMT -> GENERAL_STMT ENTER

# -------- CONDITIONAL STATEMENT --------
CONDITIONAL_BODY -> SWITCH_STMT
CONDITIONAL_BODY -> IF_STMT
CONDITIONAL_BODY -> GENERAL_STMT
CONDITIONAL_BODY -> CONDITIONAL_BODY
CONDITIONAL_BODY -> CONDITIONAL_BODY ENTER CONDITIONAL_BODY

# -------- LOOP --------
LOOP_STMT -> DO_WHILE
LOOP_STMT -> WHILE_STMT
LOOP_STMT -> FOR_STMT
LOOP_STMT -> FOR_IN
LOOP_STMT -> FOR_OF
LOOP_STMT -> FOR_AWAIT_OF 
LOOP_BODY -> GENERAL_STMT
LOOP_BODY -> ENTER
LOOP_BODY -> CONTINUE
LOOP_BODY -> LOOP_BODY ENTER_STMT LOOP_BODY
LOOP_BODY -> LOOP_BODY ENTER_STMT

# -------- IF ELIF ELSE IN LOOP ----------
# . IF ELIF ELSE
CONDITIONAL_BODY_LOOP -> CONDITIONAL_BODY
CONDITIONAL_BODY_LOOP -> CONDITIONAL_BODY ENTER BREAK
CONDITIONAL_BODY_LOOP -> CONDITIONAL_BODY ENTER CONTINUE
IF_STMT_LOOP -> IF ( EXPRESSION ) ENTER { CONDITIONAL_BODY_LOOP }
IF_STMT_LOOP -> IF ( EXPRESSION ) ENTER { EXPRESSION }
IF_STMT_LOOP -> IF ( EXPRESSION ) { CONDITIONAL_BODY_LOOP }
IF_STMT_LOOP -> IF ( EXPRESSION ) { EXPRESSION }
IF_STMT_LOOP -> IF ( EXPRESSION ) ENTER { CONDITIONAL_BODY_LOOP } IF_PART_A
IF_STMT_LOOP -> IF ( EXPRESSION ) ENTER { EXPRESSION } IF_PART_A
IF_STMT_LOOP -> IF ( EXPRESSION ) { CONDITIONAL_BODY_LOOP } IF_PART_A
IF_STMT_LOOP -> IF ( EXPRESSION ) { EXPRESSION } IF_PART_A
IF_PART_A_LOOP -> ELIF ( EXPRESSION ) { CONDITIONAL_BODY_LOOP }
IF_PART_A_LOOP -> ELIF ( EXPRESSION ) ENTER { CONDITIONAL_BODY_LOOP }
IF_PART_A_LOOP -> ELIF ( EXPRESSION ) { EXPRESSION }
IF_PART_A_LOOP -> ELIF ( EXPRESSION ) ENTER { EXPRESSION }
IF_PART_A_LOOP -> ELIF ( EXPRESSION ) { CONDITIONAL_BODY_LOOP } IF_PART_A
IF_PART_A_LOOP -> ELIF ( EXPRESSION ) ENTER { CONDITIONAL_BODY_LOOP } IF_PART_A
IF_PART_A_LOOP -> ELIF ( EXPRESSION ) { EXPRESSION } IF_PART_A
IF_PART_A_LOOP -> ELIF ( EXPRESSION ) ENTER { EXPRESSION } IF_PART_A
IF_PART_A_LOOP -> ELIF ( EXPRESSION ) { CONDITIONAL_BODY_LOOP } IF_PART_B
IF_PART_A_LOOP -> ELIF ( EXPRESSION ) ENTER { CONDITIONAL_BODY_LOOP } IF_PART_B
IF_PART_A_LOOP -> ELIF ( EXPRESSION ) { EXPRESSION } IF_PART_B
IF_PART_A_LOOP -> ELIF ( EXPRESSION ) ENTER { EXPRESSION } IF_PART_B
IF_STMT_LOOP -> IF ( EXPRESSION ) ENTER { CONDITIONAL_BODY_LOOP } IF_PART_B
IF_STMT_LOOP -> IF ( EXPRESSION ) ENTER { EXPRESSION } IF_PART_B
IF_STMT_LOOP -> IF ( EXPRESSION ) { CONDITIONAL_BODY_LOOP } IF_PART_B
IF_STMT_LOOP -> IF ( EXPRESSION ) { EXPRESSION } IF_PART_B
IF_PART_B_LOOP -> ELSE { CONDITIONAL_BODY_LOOP }
IF_PART_B_LOOP -> ELSE ENTER { CONDITIONAL_BODY_LOOP }
IF_PART_B_LOOP -> ELSE { EXPRESSION }
IF_PART_B_LOOP -> ELSE ENTER { EXPRESSION }

# . DO WHILE
DO_WHILE -> DO ENTER { ENTER LOOP_BODY ENTER } WHILE_STMT ( EXPRESSION )
DO_WHILE -> DO { ENTER LOOP_BODY ENTER } WHILE_STMT ( EXPRESSION )

# . FOR
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) { ENTER LOOP_BODY ENTER }
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) ENTER { ENTER LOOP_BODY ENTER }

# . FOR IN
FOR_IN -> FOR ( VAR_NAME IN OBJECT ) ENTER { ENTER LOOP_BODY ENTER }
FOR_IN -> FOR ( VAR_NAME IN OBJECT ) { ENTER LOOP_BODY ENTER }

# . FOR OF
FOR_OF -> FOR ( VAR_NAME OF OBJECT ) ENTER LOOP_BODY ENTER_STMT
FOR_OF -> FOR ( VAR_NAME OF OBJECT ) { ENTER LOOP_BODY ENTER }

# . FOR AWAIT ... OF
FOR_AWAIT_OF -> FOR AWAIT ( VAR_NAME OF OBJECT ) ENTER { ENTER LOOP_BODY }
FOR_AWAIT_OF -> FOR AWAIT ( VAR_NAME OF OBJECT ) { ENTER LOOP_BODY ENTER_STMT }

# . WHILE
WHILE_STMT -> WHILE ( EXPRESSION ) ENTER { ENTER LOOP_BODY ENTER }
WHILE_STMT -> WHILE ( EXPRESSION ) { ENTER LOOP_BODY ENTER }

# . VARIABLES
DEFS_STMT -> DEFS ENTER
DEFS_STMT -> DEFS
DEFS_STMT -> VAR_STMT 
DEFS_STMT -> VAR_STMT ENTER
DEFS_STMT -> LET_STMT 
DEFS_STMT -> LET_STMT ENTER
DEFS_STMT -> CONST_STMT 
DEFS_STMT -> CONST_STMT ENTER

DEFS -> VAR_NAME = DATA
DEFS -> VAR_NAME = DATA , DEFS
DEFS -> VAR_NAME
DEFS -> VAR_NAME , DEFS
DEFS -> VAR_NAME = DATA
DEFS -> VAR_NAME = DATA , DEFS
LET_STMT -> LET DEFS
CONST_STMT -> CONST DEFS
VAR_STMT -> VAR DEFS

# ------- DATA TYPES -------
DATA -> INT
DATA -> STRING
DATA -> NUMBER
DATA -> BOOLEAN
DATA -> NULL
DATA -> OBJECT
DATA -> ARRAY
DATA -> FUNCTION_CALL
DATA -> VAR_NAME
DATA -> EXPRESSION
BOOLEAN -> TRUE
BOOLEAN -> FALSE

# -------- TRY CATCH -------- (finally also included)
TRY_CATCH -> TRY ENTER { ENTER GENERAL_STMT ENTER }  CATCH ( VAR_NAME ) ENTER { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY { ENTER GENERAL_STMT ENTER } CATCH ( VAR_NAME ) ENTER { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY ENTER { ENTER GENERAL_STMT ENTER }  CATCH ( VAR_NAME ) { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY { ENTER GENERAL_STMT ENTER } CATCH ( VAR_NAME ) { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY ENTER { ENTER GENERAL_STMT ENTER } FINALLY ENTER { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY { ENTER GENERAL_STMT ENTER } FINALLY ENTER { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY ENTER { ENTER GENERAL_STMT ENTER } FINALLY { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY { ENTER GENERAL_STMT ENTER } FINALLY { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY ENTER { ENTER GENERAL_STMT ENTER } CATCH ( VAR_NAME ) ENTER { ENTER GENERAL_STMT ENTER } FINALLY ENTER { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY { ENTER GENERAL_STMT ENTER } CATCH ( VAR_NAME ) ENTER { ENTER GENERAL_STMT ENTER } FINALLY ENTER { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY ENTER { ENTER GENERAL_STMT ENTER } CATCH ( VAR_NAME ) { ENTER GENERAL_STMT ENTER } FINALLY ENTER { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY { ENTER GENERAL_STMT ENTER } CATCH ( VAR_NAME ) { ENTER GENERAL_STMT ENTER } FINALLY ENTER { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY ENTER { ENTER GENERAL_STMT ENTER } CATCH ( VAR_NAME ) ENTER { ENTER GENERAL_STMT ENTER } FINALLY { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY { ENTER GENERAL_STMT ENTER } CATCH ( VAR_NAME ) ENTER { ENTER GENERAL_STMT ENTER } FINALLY { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY ENTER { ENTER GENERAL_STMT ENTER } CATCH ( VAR_NAME ) { ENTER GENERAL_STMT ENTER } FINALLY { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY { ENTER GENERAL_STMT ENTER } CATCH ( VAR_NAME ) { ENTER GENERAL_STMT ENTER } FINALLY { ENTER GENERAL_STMT ENTER }

# -------- THROW --------
THROW_STMT -> THROW_STMT ENTER
THROW_STMT -> THROW VAR_NAME
THROW_STMT -> THROW DATA
THROW_STMT -> THROW FUNCTION_CALL

# . OBJECT
OBJECT -> { ENTER OBJECT_BODY ENTER }
OBJECT -> VAR_NAME
OBJECT_BODY -> VAR_NAME : DATA
OBJECT_BODY -> VAR_NAME : DATA , OBJECT_BODY

# . ARRAY
ARRAY -> [ ARRAY_BODY ]
ARRAY_BODY -> DATA
ARRAY_BODY -> DATA , ARRAY_BODY

# -------- ENTER_STMT --------
ENTER -> ENTER ENTER
ENTER -> ENTER

# -------- COMMENT ---------
COMMENT_STMT -> COMMENT_STMT
COMMENT_STMT -> COMMENT_STMT ENTER

@