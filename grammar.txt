# Javascript syntax grammar parser
# (c) Cebokers 2022
#
# START SECTION
#
#
# WHILE SECTION
DO_WHILE -> DO LOOP_STATEMENT WHILE ( EXPRESSION ) ENTER
DO_WHILE -> DO ENTER LOOP_STATEMENT WHILE ( EXPRESSION ) ENTER
DO_WHILE -> DO { ENTER LOOP_STATEMENT } WHILE ( EXPRESSION ) ENTER
WHILE_LOOP -> WHILE ( EXPRESSION ) LOOP_STATEMENT ENTER
WHILE_LOOP -> WHILE ( EXPRESSION ) { LOOP_STATEMENT } ENTER
#
# FOR SECTION
FOR_LOOP -> FOR ( INITIALIZATION ; EXPRESSION ; STATEMENT ) LOOP_STATEMENT ENTER
FOR_LOOP -> FOR ( INITIALIZATION ; EXPRESSION ; STATEMENT ) { LOOP_STATEMENT } ENTER
FOR_IN -> FOR ( VARIABLE IN ITERABLE ) LOOP_STATEMENT ;
FOR_IN -> FOR ( VARIABLE IN ITERABLE ) { LOOP_STATEMENT } ENTER
FOR_OF -> FOR ( VARIABLE OF ITERABLE ) LOOP_STATEMENT ENTER
FOR_OF -> FOR ( VARIABLE OF ITERABLE ) { LOOP_STATEMENT } ENTER
FOR_AWAIT -> FOR AWAIT ( VARIABLE OF ITERABLE ) LOOP_STATEMENT ENTER
FOR_AWAIT -> FOR AWAIT ( VARIABLE OF ITERABLE ) { LOOP_STATEMENT } ENTER
#
# FUNCTION SECTION
LOOP_STATEMENT -> THINGS
ENTER -> NEWLINE
ENTER -> NEWLINE ENTER
#
@