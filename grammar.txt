# Javascript syntax grammar parser
# (c) Cebokers 2022

# Every line started with '#' and empty line will not be processed by the parser

# -------- START --------
START -> GENERAL_STMT

# -------- GENERAL STATEMENT --------
GENERAL_STMT -> CONDITIONAL_STMT
GENERAL_STMT -> LOOP_STMT
GENERAL_STMT -> FUNCTION_STMT
GENERAL_STMT -> DEFS_STMT
GENERAL_STMT -> COMMENT_STMT
GENERAL_STMT -> TRY_CATCH
GENERAL_STMT -> THROW_STMT
GENERAL_STMT -> GENERAL_STMT ENTER_STMT

# -------- DELETE STATEMENT --------
DELETE_STMT -> DELETE OBJECT

# -------- CONDITIONAL STATEMENT --------
CONDITIONAL_STMT -> SWITCH_STMT
CONDITIONAL_STMT -> IF_STMT
CONDITIONAL_BODY -> GENERAL_STMT
CONDITIONAL_BODY -> CONDITIONAL_BODY ENTER_STMT
CONDITIONAL_BODY -> CONDITIONAL_BODY ENTER_STMT CONDITIONAL_BODY

# . SWITCH STATEMENT
SWITCH_STMT -> SWITCH ( EXPRESSION ) E_ENTER { E_ENTER CASE_STMT E_ENTER }
CASE_STMT -> CASE INT : ENTER_STMT EXPRESSION E_ENTER
CASE_STMT -> CASE INT : ENTER_STMT CONDITIONAL_STMT E_ENTER
CASE_STMT -> CASE INT : ENTER_STMT LOOP_STMT E_ENTER
CASE_STMT -> DEFAULT : ENTER_STMT EXPRESSION
CASE_STMT -> DEFAULT : ENTER_STMT CONDITIONAL_STMT
CASE_STMT -> DEFAULT : ENTER_STMT LOOP_STMT
CASE_STMT -> EPSILON
CASE_STMT -> CASE INT : ENTER_STMT EXPRESSION E_ENTER ENTER_STMT CASE_STMT
CASE_STMT -> CASE INT : ENTER_STMT CONDITIONAL_STMT E_ENTER ENTER_STMT CASE_STMT
CASE_STMT -> CASE INT : ENTER_STMT LOOP_STMT E_ENTER ENTER_STMT CASE_STMT

# . IF ELSEIF ELSE
IF_STMT -> IF EXPRESSION E_ENTER { E_ENTER CONDITIONAL_BODY E_ENTER } IF_PART_A
IF_STMT -> IF EXPRESSION IF_STMT E_ENTER { E_ENTER CONDITIONAL_BODY E_ENTER }
IF_PART_A -> ELIF E_ENTER { E_ENTER CONDITIONAL_BODY E_ENTER }
IF_PART_A -> ELIF E_ENTER { E_ENTER CONDITIONAL_BODY E_ENTER } IF_PART_A
IF_PART_A -> IF_PART_B E_ENTER { E_ENTER CONDITIONAL_BODY E_ENTER }
IF_PART_B -> ELSE E_ENTER { E_ENTER CONDITIONAL_BODY E_ENTER }

# -------- LOOP --------
LOOP_STMT -> DO_WHILE
LOOP_STMT -> WHILE_STMT
LOOP_STMT -> FOR_STMT
LOOP_STMT -> FOR_IN
LOOP_STMT -> FOR_OF
LOOP_STMT -> FOR_AWAIT_OF 
LOOP_BODY -> GENERAL_STMT
LOOP_BODY -> E_ENTER
LOOP_BODY -> CONTINUE
LOOP_BODY -> LOOP_BODY ENTER_STMT LOOP_BODY
LOOP_BODY -> LOOP_BODY ENTER_STMT
# IF_LOOP_BODY (outliers: ketika E_ENTER ;/continue berada di dalam if)

# . DO WHILE
DO_WHILE -> DO E_ENTER LOOP_BODY ENTER_STMT WHILE_STMT EXPRESSION ENTER_STMT
DO_WHILE -> DO E_ENTER { E_ENTER LOOP_BODY E_ENTER } WHILE_STMT ( EXPRESSION )

# . FOR
FOR_STMT -> FOR ( DEFS DATA DATA ) E_ENTER LOOP_BODY ENTER_STMT
FOR_STMT -> FOR ( DEFS DATA DATA ) E_ENTER { E_ENTER LOOP_BODY E_ENTER }

# . FOR IN
FOR_IN -> FOR ( VAR_NAME IN OBJECT ) E_ENTER LOOP_BODY ENTER_STMT
FOR_IN -> FOR ( VAR_NAME IN OBJECT ) E_ENTER { E_ENTER LOOP_BODY E_ENTER }

# . FOR OF
FOR_OF -> FOR ( VAR_NAME OF OBJECT ) E_ENTER LOOP_BODY ENTER_STMT
FOR_OF -> FOR ( VAR_NAME OF OBJECT ) { E_ENTER LOOP_BODY E_ENTER }

# . FOR AWAIT ... OF
FOR_AWAIT_OF -> FOR AWAIT ( VAR_NAME OF OBJECT ) E_ENTER LOOP_BODY ENTER_STMT
FOR_AWAIT_OF -> FOR AWAIT ( VAR_NAME OF OBJECT ) E_ENTER { E_ENTER LOOP_BODY }

# . WHILE
WHILE_STMT -> WHILE ( EXPRESSION ) E_ENTER LOOP_BODY
WHILE_STMT -> WHILE ( EXPRESSION ) E_ENTER { E_ENTER LOOP_BODY }

# -------- DEFS --------
# . FUNCTION
FUNCTION_STMT -> FUNCTION
FUNCTION_STMT -> ASYNC_FUNCTION
FUNCTION_STMT -> FUNCTION_CALL

FUNCTION_BODY -> GENERAL_STMT
FUNCTION_BODY -> RETURN_STMT
FUNCTION_BODY -> FUNCTION_BODY ENTER_STMT FUNCTION_BODY
FUNCTION_BODY_ASYNC -> FUNCTION_BODY
FUNCTION_BODY_ASYNC -> AWAIT FUNCTION_BODY

FUNCTION -> FUNCTION_C FUNCTION_NAME ( PARAMS ) E_ENTER FUNCTION_BODY ENTER_STMT
FUNCTION -> FUNCTION_C FUNCTION_NAME ( PARAMS ) E_ENTER { E_ENTER FUNCTION_BODY E_ENTER }
ASYNC_FUNCTION -> ASYNC FUNCTION FUNCTION_NAME ( PARAMS ) E_ENTER FUNCTION_BODY_ASYNC ENTER_STMT
PARAMS -> VAR_NAME
PARAMS -> VAR_NAME , PARAMS
PARAMS -> VAR_NAME = DATA
PARAMS -> VAR_NAME = DATA , PARAMS
FUNCTION_NAME -> VAR_NAME
FUNCTION_CALL -> FUNCTION_NAME ( ARGS ) ENTER_STMT
FUNCTION_CALL -> CLASS . FUNCTION_NAME ( ARGS ) ENTER_STMT
CLASS -> VAR_NAME
ARGS -> DATA
ARGS -> DATA , ARGS
ARGS -> VAR_NAME = DATA
ARGS -> VAR_NAME = DATA , ARGS
RETURN_STMT -> RETURN DATA E_ENTER

# . VARIABLES
DEFS_STMT -> VAR_STMT
DEFS_STMT -> LET_STMT
DEFS_STMT -> CONST_STMT
DEFS_STMT -> DEFS

DEFS -> VAR_NAME = DATA
DEFS -> VAR_NAME = DATA , DEFS
DEFS -> VAR_NAME
DEFS -> VAR_NAME , DEFS
DEFS -> VAR_NAME = DATA
DEFS -> VAR_NAME = DATA , DEFS
LET_STMT -> LET DEFS
CONST_STMT -> CONST DEFS
VAR_STMT -> VAR DEFS

# -------- TRY CATCH -------- (finally also included)
TRY_CATCH -> TRY E_ENTER { E_ENTER GENERAL_STMT E_ENTER } E_ENTER CATCH E_ENTER ( VAR_NAME ) E_ENTER { E_ENTER GENERAL_STMT E_ENTER }
TRY_CATCH -> TRY E_ENTER { E_ENTER GENERAL_STMT E_ENTER } E_ENTER FINALLY E_ENTER { E_ENTER GENERAL_STMT E_ENTER }
TRY_CATCH -> TRY E_ENTER { E_ENTER GENERAL_STMT E_ENTER } E_ENTER CATCH E_ENTER ( VAR_NAME ) E_ENTER { E_ENTER GENERAL_STMT E_ENTER } E_ENTER FINALLY E_ENTER { E_ENTER GENERAL_STMT E_ENTER }

# -------- THROW --------
THROW_STMT -> THROW VAR_NAME
THROW_STMT -> THROW DATA
THROW_STMT -> THROW FUNCTION_CALL

# ------- DATA TYPES -------
DATA -> INT
DATA -> STRING
DATA -> NUMBER
DATA -> BOOLEAN
DATA -> NULL
DATA -> OBJECT
DATA -> ARRAY
DATA -> FUNCTION_CALL
DATA -> VAR_NAME
DATA -> EXPRESSION
NUMBER -> 0
NUMBER -> 1
NUMBER -> 2
NUMBER -> 3
NUMBER -> 4
NUMBER -> 5
NUMBER -> 6
NUMBER -> 7
NUMBER -> 8
NUMBER -> 9
NUMBER -> NUMBER NUMBER
NUMBER -> NUMBER . NUMBER
STRING -> " ANY_SINGLE_LINE "
STRING -> ' ANY_SINGLE_LINE '
STRING -> ` ANY `
BOOLEAN -> TRUE
BOOLEAN -> FALSE

# . OBJECT
OBJECT -> { E_ENTER OBJECT_BODY E_ENTER }
OBJECT -> VAR_NAME
OBJECT_BODY -> VAR_NAME : DATA
OBJECT_BODY -> VAR_NAME : DATA , OBJECT_BODY

# . ARRAY
ARRAY -> [ E_ENTER ARRAY_BODY E_ENTER ]
ARRAY_BODY -> DATA
ARRAY_BODY -> DATA , ARRAY_BODY

# -------- ENTER_STMT --------
ENTER_STMT -> ENTER ENTER_STMT
ENTER_STMT -> EPSILON

# . E-ENTER_STMT (epsilon or ENTER_STMT)
E_ENTER -> EPSILON
E_ENTER -> ENTER_STMT

# -------- COMMENTS --------
COMMENT_STMT -> SINGLE_LINE_COMMENT | MULTI_LINE_COMMENT
SINGLE_LINE_COMMENT -> // COMMENT
MULTI_LINE_COMMENT -> /* COMMENT */

@